<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NIO与Socket编程技术</title>
    <link href="/2023/03/22/NIO%E5%92%8CSocket/"/>
    <url>/2023/03/22/NIO%E5%92%8CSocket/</url>
    
    <content type="html"><![CDATA[<h2 id="NIO与Socket编程技术指南"><a href="#NIO与Socket编程技术指南" class="headerlink" title="NIO与Socket编程技术指南"></a>NIO与Socket编程技术指南</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>让某一个类实现多线程操作，有两种方法：<br>1.继承Thread类(Thread类已经实现Runnable接口了)<br>2.<strong>实现Runnable接口</strong></li><li><strong>补充：</strong><br>1.start():启动线程的方法，不能重复调用！<br>2.run()：一个类中的普通方法，可以重复调用！</li><li>开启线程的具体代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">package</span> learnthread;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Learn</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TestThread</span> <span class="hljs-variable">testThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-type">TestThread</span> <span class="hljs-variable">testThread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestThread</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        testThread.run();<br>        testThread1.run();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 继承Thread类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>    <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestThread</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;运行  :  &quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    sleep((<span class="hljs-type">int</span>) Math.random() * <span class="hljs-number">10</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>输出结果：<br><span class="hljs-number">1</span>运行  :  <span class="hljs-number">0</span><br><span class="hljs-number">1</span>运行  :  <span class="hljs-number">1</span><br><span class="hljs-number">1</span>运行  :  <span class="hljs-number">2</span><br><span class="hljs-number">2</span>运行  :  <span class="hljs-number">0</span><br><span class="hljs-number">2</span>运行  :  <span class="hljs-number">1</span><br><span class="hljs-number">2</span>运行  :  <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">package</span> learnthread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Learn</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">TestRunnable</span> <span class="hljs-variable">testRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestRunnable</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-type">TestRunnable</span> <span class="hljs-variable">testRunnable1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestRunnable</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>    testRunnable.run();<br>    testRunnable1.run();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现Runnable接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestRunnable</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注意：实现Runnable接口必须必须必须要重写接口里面的抽象函数run()</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;运行  :  &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep((<span class="hljs-type">int</span>) Math.random() * <span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>输出结果：<br><span class="hljs-number">1</span>运行  :  <span class="hljs-number">0</span><br><span class="hljs-number">1</span>运行  :  <span class="hljs-number">1</span><br><span class="hljs-number">1</span>运行  :  <span class="hljs-number">2</span><br><span class="hljs-number">2</span>运行  :  <span class="hljs-number">0</span><br><span class="hljs-number">2</span>运行  :  <span class="hljs-number">1</span><br><span class="hljs-number">2</span>运行  :  <span class="hljs-number">2</span><br>跟上面一样的！<br></code></pre></td></tr></table></figure><h3 id="多线程的安全问题"><a href="#多线程的安全问题" class="headerlink" title="多线程的安全问题"></a>多线程的安全问题</h3></li><li>补：同步在<strong>一定程度上</strong>可以看做是单线程，异步在<strong>一定程度上</strong>可以看做是多线程</li></ul><h5 id="1-实例锁-sychorinzed"><a href="#1-实例锁-sychorinzed" class="headerlink" title="1.实例锁(sychorinzed)"></a>1.实例锁(sychorinzed)</h5><ul><li>在方法前加上sychroinzed。但是只对类的一个对象、一个线程起保护作用</li></ul><h5 id="2-全局锁、类锁-static-sychorinzed"><a href="#2-全局锁、类锁-static-sychorinzed" class="headerlink" title="2.全局锁、类锁(static sychorinzed)"></a>2.全局锁、类锁(static sychorinzed)</h5><ul><li>在方法前加上static synchroinzed。这个锁的范围是针对类的所有对象，就是这个类的所有对象，都能保证线程同步</li><li><strong>这个文章写得很好</strong>:<a href="https://blog.csdn.net/zcg_741454897/article/details/108540717?spm=1001.2014.3001.5506">https://blog.csdn.net/zcg_741454897/article/details/108540717?spm=1001.2014.3001.5506</a></li></ul><h5 id="3-实例方法中同步块"><a href="#3-实例方法中同步块" class="headerlink" title="3.实例方法中同步块"></a>3.实例方法中同步块</h5><ul><li>和实例锁很相似，但同步块不需要同步整个方法，而是同步方法中的一部分<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log1</span><span class="hljs-params">(String msg1, String msg2)</span>&#123;<br>      log.writeln(msg1);<br>      log.writeln(msg2);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log2</span><span class="hljs-params">(String msg1, String msg2)</span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>)&#123;<br>         log.writeln(msg1);<br>         log.writeln(msg2);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-静态方法中同步块"><a href="#4-静态方法中同步块" class="headerlink" title="4.静态方法中同步块"></a>4.静态方法中同步块</h5><ul><li>和类锁相似，但同步块不需要同步整个方法，而是同步方法中的一部分<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log1</span><span class="hljs-params">(String msg1, String msg2)</span>&#123;<br>       log.writeln(msg1);<br>       log.writeln(msg2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log2</span><span class="hljs-params">(String msg1, String msg2)</span>&#123;<br>       <span class="hljs-keyword">synchronized</span>(MyClass.class)&#123;<br>          log.writeln(msg1);<br>          log.writeln(msg2);<br>       &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><strong>推荐文章，写的也很好</strong>：<a href="https://blog.csdn.net/weixin_34221036/article/details/92793161?spm=1001.2014.3001.5506">https://blog.csdn.net/weixin_34221036/article/details/92793161?spm=1001.2014.3001.5506</a></li></ul><h3 id="string常量池问题"><a href="#string常量池问题" class="headerlink" title="string常量池问题"></a>string常量池问题</h3><p>  <strong>常量池</strong>是为了避免频繁的创建和销毁对象而影响系统性能，其实现了<strong>对象的共享</strong>。<strong>字符串常量池</strong>，在编译阶段就把所有的字符串文字放到<strong>一个常量池</strong>中</p><ul><li>String的两个值都是”nantong”,两个线程持有相同的锁，造成B线程不能执行同步synchronized代码块不使用String作为锁对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String stringParam)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">synchronized</span> (stringParam) &#123;<span class="hljs-comment">//同步块</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>System.out.println(Thread.currentThread().getName());<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>以下是改正方法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Service</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">(String stringParam)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">synchronized</span> (stringParam) &#123;<span class="hljs-comment">//同步块</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>System.out.println(Thread.currentThread().getName());<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(String stringParam)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">synchronized</span> (stringParam.getClass()) &#123;<span class="hljs-comment">//类锁</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>System.out.println(Thread.currentThread().getName());<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记</title>
    <link href="/2023/03/15/java/"/>
    <url>/2023/03/15/java/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="JavaSE基础"><a href="#JavaSE基础" class="headerlink" title="JavaSE基础"></a>JavaSE基础</h1><ul><li><a href="#%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5">第一阶段</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5">第二阶段</a><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2></li></ul><h3 id="一、类与对象"><a href="#一、类与对象" class="headerlink" title="一、类与对象"></a>一、类与对象</h3><h3 id="二、属性（字段）"><a href="#二、属性（字段）" class="headerlink" title="二、属性（字段）"></a>二、属性（字段）</h3><h3 id="三、成员方法（方法）"><a href="#三、成员方法（方法）" class="headerlink" title="三、成员方法（方法）"></a>三、成员方法（方法）</h3><ul><li>方法重载</li><li>可变参数</li><li>作用域</li></ul><h3 id="四、构造器（构造方法）"><a href="#四、构造器（构造方法）" class="headerlink" title="四、构造器（构造方法）"></a>四、构造器（构造方法）</h3><ul><li>this、super关键字</li></ul><h3 id="五、包、访问修饰符"><a href="#五、包、访问修饰符" class="headerlink" title="五、包、访问修饰符"></a>五、包、访问修饰符</h3><h3 id="六、封装继承多态"><a href="#六、封装继承多态" class="headerlink" title="六、封装继承多态"></a>六、封装继承多态</h3><h4 id="emsp-1-封装（set、get）"><a href="#emsp-1-封装（set、get）" class="headerlink" title="&emsp;1.封装（set、get）"></a>&emsp;1.封装（set、get）</h4><ul><li>提供一个set方法用于对属性的赋值</li><li>提供一个get方法用于获取属性的值</li></ul><h4 id="emsp-2-继承（extends）"><a href="#emsp-2-继承（extends）" class="headerlink" title="&emsp;2.继承（extends）"></a>&emsp;2.继承（extends）</h4><ul><li>子类构造器和父类的构造器的关系</li><li>super关键字（注意和this关键字的区别）</li></ul><h4 id="emsp-3-多态（体现在方法和对象）"><a href="#emsp-3-多态（体现在方法和对象）" class="headerlink" title="&emsp;3.多态（体现在方法和对象）"></a>&emsp;3.多态（体现在方法和对象）</h4><ul><li>方法的多态：重写和重载</li><li><strong>对象的多态：向下转型、向上转型</strong><br> <strong>对象的编译类型和运行类型可以不一致，运行类型可以通过getclass()方法来查看</strong></li><li>Java的动态绑定机制（和多态有关）<br>调用方法时，<strong>该方法会和该对象的运行类型绑定</strong>；<strong>属性没有动态绑定机制</strong>，哪里声明哪里使用</li><li>多态数组</li><li>多态参数</li></ul><h3 id="七、Object类"><a href="#七、Object类" class="headerlink" title="七、Object类"></a>七、Object类</h3><ul><li>equals、toString、hashCode、finalize（很多方法都需要重写）</li></ul><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><h3 id="一、类变量和类方法（静态变量和静态方法）"><a href="#一、类变量和类方法（静态变量和静态方法）" class="headerlink" title="一、类变量和类方法（静态变量和静态方法）"></a>一、类变量和类方法（静态变量和静态方法）</h3><ul><li>非静态方法可以访问静态变量(方法)和普通变量(方法)</li><li>静态方法只能访问静态变量(方法)（因为先有静态后有普通变量）</li><li>静态方法适合做一些工具类</li></ul><h3 id="二、main方法语法"><a href="#二、main方法语法" class="headerlink" title="二、main方法语法"></a>二、main方法语法</h3><ul><li>和静态方法一样，只能直接使用本类中的类变量和类方法</li><li>可以动态传值</li><li>java虚拟机调用main方法（public），在调用时不用创建对象调用(static),没有返回值（void），args数组保存<strong>执行java命令时传递给所运行的类的参数</strong>（String[] args）</li></ul><h3 id="三、代码块-初始化块"><a href="#三、代码块-初始化块" class="headerlink" title="三、代码块(初始化块)"></a>三、代码块(初始化块)</h3><ul><li>会在执行构造器前执行代码块，写在类内就可以，不用写在构造器或者方法中</li><li>语法： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br> 语法<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">static</span> &#123;<br> 语法<br>&#125;<br></code></pre></td></tr></table></figure></li><li>静态代码块会在<strong>类加载时</strong>只执行一次，普通代码块会在<strong>每一个对象创建时</strong>执行，使用静态成员时不会执行普通代码块</li><li><strong>注意：类何时被加载</strong>：<br>1.创建该类对象<br>2.创建子类对象，父类也会被加载<br>3.使用静态成员（方法、属性）</li><li>加载类信息-&gt;加载(父子类)静态代码块和静态属性初始化(按顺序执行，指谁写在前面就执行谁)-&gt;创建对象-&gt;加载(父子类)普通代码块和普通变量(顺序执行)-&gt;构造方法</li><li>构造器内语句的执行顺序：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> 构造器()&#123;<br> <span class="hljs-comment">//super();</span><br> <span class="hljs-comment">//加载普通代码块和普通变量</span><br> 语句;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>(有继承时)父类静态代码块和静态属性初始化-&gt;子类静态代码块和静态属性初始化-&gt;父类加载普通代码块和普通变量-&gt;父类构造方法-&gt;子类加载普通代码块和普通变量-&gt;子类构造方法(<strong>面试题</strong>)</li><li>非静态代码块可以访问所有成员，静态代码块只能访问静态成员</li></ul><h3 id="四、单例模式"><a href="#四、单例模式" class="headerlink" title="四、单例模式"></a>四、单例模式</h3><p>  1.饿汉式（没有使用对象时就创建对象）<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Single</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Single</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Single</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Single</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Single <span class="hljs-title function_">GetInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li>构造器私有化，禁止在外部创建对象</li><li>创建私有静态对象（唯一），在类加载时对象就会被创建好</li><li>创建公共获取唯一对象的方法</li></ul><p>  2.懒汉式（用的时候再去创建，<strong>但会有进程问题</strong>）<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Cat instance;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">()</span> &#123;<br><br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cat <span class="hljs-title function_">GetInstance</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>          instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> instance;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="五、final"><a href="#五、final" class="headerlink" title="五、final"></a>五、final</h3><ul><li>修饰类、成员、局部变量</li><li>作用：类不希望被继承；父类方法不希望被子类重写或重载；属性、局部变量不希望被改变 </li><li>修饰属性时，必须在定义时、构造器、代码块中赋值</li><li>修饰<strong>静态</strong>属性时，只能在定义和代码块中赋值</li><li>final 和 static 往往搭配使用，效率更高，<strong>不会导致类加载</strong>.底层编译器做了优化处理<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>   <span class="hljs-comment">//打印Demo.num时不会显示“你好”，因为类没有被加载</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;你好&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>包装类和String都是final修饰的</li></ul><h3 id="六、抽象类"><a href="#六、抽象类" class="headerlink" title="六、抽象类"></a>六、抽象类</h3><ul><li>父类的不确定的方法为抽象方法，该父类为抽象类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<span class="hljs-comment">//没有方法体</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>abstract只能修饰类和方法，且类不能被实例化</li><li>抽象类可以没有抽象方法，但抽象方法不能没有抽象类</li><li><strong>子类继承抽象类时，必须重写所有抽象方法</strong></li><li>抽象方法不能被private、final和static搭配使用<h4 id="重要的应用：模板设计模式-提高复用性"><a href="#重要的应用：模板设计模式-提高复用性" class="headerlink" title="重要的应用：模板设计模式(提高复用性)"></a>重要的应用：模板设计模式(提高复用性)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Num</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        calculate();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时：&quot;</span> + (start - end));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExercise</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>            num += i;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractExercise</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">800000</span>; i++) &#123;<br>            num += i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="七、接口（和继承很像）"><a href="#七、接口（和继承很像）" class="headerlink" title="七、接口（和继承很像）"></a>七、接口（和继承很像）</h3><ul><li> 接口里面可以有属性和方法(抽象方法、默认实现方法、静态方法)</li><li> 接口不能被实例化</li><li> 接口里面所有方法都是public，抽象方法不用加abstract</li><li> <strong>抽象类</strong>实现接口，可以不用实现接口的方法，但普通类要全部实现</li><li> 一个类可以实现(implements)很多接口，接口不能继承类但能继承很多接口</li><li> 所有属性都是public static final，调用方法：接口名.属性</li><li> 接口在一定程度上实现了代码解耦(?)</li><li> 接口具有多态：多态参数、多态数组<h3 id="八、内部类"><a href="#八、内部类" class="headerlink" title="八、内部类"></a>八、内部类</h3></li><li>分类：局部内部类、匿名内部类;成员内部类、静态内部类<h5 id="局部内部类-相当于一个局部变量-："><a href="#局部内部类-相当于一个局部变量-：" class="headerlink" title="局部内部类(相当于一个局部变量)："></a>局部内部类(相当于一个局部变量)：</h5>1.不能添加访问修饰符，但可以加final<br>2.作用域：方法体内或者代码块中<br>3.外部类想调用局部内部类，则需要在<strong>包含内部类的方法</strong>中创建内部类对象，再通过调用此方法调用内部类；其他外部类不能调用局部内部类<br>4.外部类和局部内部类有重名属性，有如下解决方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        outer.Printf();<br>    &#125;<br>  &#125; <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示局内内部类的使用</span><br><span class="hljs-comment"> */</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Printf</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<span class="hljs-comment">//局部内部类</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(num);<span class="hljs-comment">//200</span><br>                System.out.println(Outer.<span class="hljs-built_in">this</span>.num);<span class="hljs-comment">//100</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        inner.m1();<br>    &#125;<br>  &#125;<br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherOuter</span>&#123;<span class="hljs-comment">//其他外部类</span><br> &#125;<br></code></pre></td></tr></table></figure><h5 id="匿名内部类-相当于局部变量，很重要！！！-："><a href="#匿名内部类-相当于局部变量，很重要！！！-：" class="headerlink" title="匿名内部类(相当于局部变量，很重要！！！)："></a>匿名内部类(相当于局部变量，很重要！！！)：</h5></li><li>基本语法如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 接口或类(参数列表)&#123;<br> 类体<br> &#125;;<br></code></pre></td></tr></table></figure></li><li>基于接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        outer.Printf();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示匿名内部类的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Printf</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果某个类只使用一次，我可以用匿名内部类来简化开发</span><br><span class="hljs-comment"> * tiger的编译类型：IA</span><br><span class="hljs-comment"> * tiger的运行类型：匿名内部类</span><br><span class="hljs-comment"> * 匿名内部类只能使用一次，但实例tiger可以反复调用</span><br><span class="hljs-comment"> */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        我们看底层 ，系统会给 XXXXX 会分配 类名 Outer$1</span><br><span class="hljs-comment">        class XXXXX implements IA&#123;</span><br><span class="hljs-comment">            @Override</span><br><span class="hljs-comment">            public void shout() &#123;</span><br><span class="hljs-comment">                System.out.println(&quot;老虎汪汪叫&quot;);</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shout</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎汪汪叫&quot;</span>);<br>            &#125;<br>        &#125;;<br>        System.out.println(tiger.getClass());<span class="hljs-comment">//gerClass()是查看实例的运行类型</span><br>        tiger.shout();<br>        tiger.shout();<br>    &#125;<br>&#125;<br>输出：<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerC</span>.Outer$<span class="hljs-number">1</span><br>老虎汪汪叫<br>老虎汪汪叫<br></code></pre></td></tr></table></figure></li><li>基于类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Printf</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        我们看底层 ，系统会给 XXXXX 会分配 类名 Outer$1</span><br><span class="hljs-comment">        class XXXXX extends Mother&#123;&quot;111&quot;&#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Mother</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mother</span>(<span class="hljs-string">&quot;111&quot;</span>) &#123;&#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mother</span>(<span class="hljs-string">&quot;222&quot;</span>)&#123;<br>        &#125;.Say();<span class="hljs-comment">//基于接口的也可以这样使用，不用创建对象，匿名对象+匿名内部类</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mother</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    Mother(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Say</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你好！！！！&quot;</span>);<br>    &#125;<br>&#125;<br>输出：<br>你好！！！！<br></code></pre></td></tr></table></figure></li><li>注意事项和上面局部内部类差不多</li><li>可以当作实参直接传递，很实用<h5 id="成员内部类-相当于一个成员"><a href="#成员内部类-相当于一个成员" class="headerlink" title="成员内部类(相当于一个成员)"></a>成员内部类(相当于一个成员)</h5></li><li>写在外部类中</li><li>可以被访问修饰符修饰</li><li>外部类想调用成员内部类，则需创建<strong>成员方法</strong>，在方法中创建成员内部类的对象，再调用</li><li>其他外部类也可以访问成员内部类(有两种方法)<h5 id="静态内部类-相当于一个成员"><a href="#静态内部类-相当于一个成员" class="headerlink" title="静态内部类(相当于一个成员)"></a>静态内部类(相当于一个成员)</h5></li><li>相当于成员内部类被static修饰</li><li>和静态方法一样，只能访问外部类中的静态变量</li><li>其他外部类可以访问静态内部类(有两种方法)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">OOuter</span> <span class="hljs-variable">oOuter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OOuter</span>();<br>        <span class="hljs-comment">//第一种</span><br>        <span class="hljs-comment">//Cat不是静态内部类，需要创建外部类对象来调用</span><br>        OOuter.<span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> oOuter.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-comment">//第二种</span><br>        OOuter.<span class="hljs-type">Cat</span> <span class="hljs-variable">cat1</span> <span class="hljs-operator">=</span> oOuter.t1();<br><br>        <span class="hljs-comment">//第一种</span><br>        <span class="hljs-comment">//Cat为静态，不需要创建外部类对象来调用，直接new就行</span><br>        OOuter.<span class="hljs-type">Lion</span> <span class="hljs-variable">lion</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OOuter</span>.Lion();<br>        <span class="hljs-comment">//第二种</span><br>        OOuter.<span class="hljs-type">Lion</span> <span class="hljs-variable">lion1</span> <span class="hljs-operator">=</span> OOuter.t2();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOuter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Read</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(a);<br>            System.out.println(OOuter.<span class="hljs-built_in">this</span>.a);<span class="hljs-comment">//遇到重名的变量</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">t1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lion</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Read</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(b);<br>        System.out.println(OOuter.b);<span class="hljs-comment">//遇到重名的变量</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lion <span class="hljs-title function_">t2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lion</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、枚举类"><a href="#九、枚举类" class="headerlink" title="九、枚举类"></a>九、枚举类</h3><h5 id="自定义类实现枚举"><a href="#自定义类实现枚举" class="headerlink" title="自定义类实现枚举"></a>自定义类实现枚举</h5></li><li>构造器私有化，删掉set方法，直接创建固定对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String decs;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>);<span class="hljs-comment">//对象名要大写，最好配合staic final来优化性能</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String decs)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.decs = decs;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, decs=&#x27;&quot;</span> + decs + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="enum关键字实现枚举"><a href="#enum关键字实现枚举" class="headerlink" title="enum关键字实现枚举"></a>enum关键字实现枚举</h5></li><li>会隐式的继承Enum类</li><li>对象一定要放在最前面；若对象使用无参构造器，括号都可以省略<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;<br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>),<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;寒冷&quot;</span>);<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String decs;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String decs)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.decs = decs;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, decs=&#x27;&quot;</span> + decs + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Enum类的成员方法-这里推荐看源码！！"><a href="#Enum类的成员方法-这里推荐看源码！！" class="headerlink" title="Enum类的成员方法(这里推荐看源码！！)"></a>Enum类的成员方法(这里推荐看源码！！)</h5></li><li>ordinal():当前枚举对象的序列号</li><li>values():返回含有枚举对象的数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(Season i : Season.values())&#123;<br>    System.out.println(i);<br>&#125;<span class="hljs-comment">//新知识点：增强for循环</span><br></code></pre></td></tr></table></figure></li><li>value():将字符串转化为枚举对象</li><li>compareTo():对比枚举对象的序列号</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51MCU</title>
    <link href="/2023/03/15/51/"/>
    <url>/2023/03/15/51/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机-普中A2——STC89C52RC"><a href="#51单片机-普中A2——STC89C52RC" class="headerlink" title="51单片机(普中A2——STC89C52RC)"></a>51单片机(普中A2——STC89C52RC)</h1><ul><li>1ms延时方法<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> xms)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j;<br>    <span class="hljs-keyword">while</span>(xms--) &#123;<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">239</span>;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-keyword">while</span> (--j);<br>        &#125; <span class="hljs-keyword">while</span> (--i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="独立按键"><a href="#独立按键" class="headerlink" title="独立按键"></a>独立按键</h3></li><li>控制LED显示二进制<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> LED_Num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-keyword">if</span>(P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span>(P3_1 == <span class="hljs-number">0</span>);<br>            Delay(<span class="hljs-number">20</span>);<br>        P2 = ~(++LED_Num);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>控制LED移位<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> LED_Num = <span class="hljs-number">0</span>;<br>    P2 = ~<span class="hljs-number">0x01</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(P3_0 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span>(P3_0 == <span class="hljs-number">0</span>);<br>            Delay(<span class="hljs-number">20</span>);<br>            LED_Num++;<br>            <span class="hljs-keyword">if</span>(LED_Num &gt;= <span class="hljs-number">8</span>) &#123;<br>                LED_Num = <span class="hljs-number">0</span>;<br>            &#125;<br>            P2 = ~(<span class="hljs-number">0x01</span> &lt;&lt; LED_Num);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(P3_1 == <span class="hljs-number">0</span>) &#123;<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">while</span>(P3_1 == <span class="hljs-number">0</span>);<br>            Delay(<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">if</span>(LED_Num &lt;= <span class="hljs-number">0</span>) &#123;<br>                LED_Num = <span class="hljs-number">7</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                LED_Num--;<br>            &#125;<br>            P2 = ~(<span class="hljs-number">0x01</span> &lt;&lt; LED_Num);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h3></li><li>静态数码管<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">uchar lightNum[] = &#123;<span class="hljs-number">0x3F</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x5B</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x6D</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x6F</span>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Light</span><span class="hljs-params">(uchar location , num)</span><br>&#123;<br><span class="hljs-keyword">switch</span>(location)<br>&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">8</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">7</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>&#125;<br>    P0 = lightNum[num];<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>Light(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//这个循环不能删！！！</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>动态数码管<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">uchar lightNum[] = &#123;<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x4F</span>,<span class="hljs-number">0x66</span>, <span class="hljs-number">0x6D</span>,<span class="hljs-number">0x7D</span>, <span class="hljs-number">0x07</span>,<span class="hljs-number">0x7F</span>, <span class="hljs-number">0x6F</span>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(uint xms)</span><span class="hljs-comment">//@12.000MHz</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j;<br>    <span class="hljs-keyword">while</span>(xms--)<br>    &#123;<br>        i = <span class="hljs-number">2</span>;<br>        j = <span class="hljs-number">239</span>;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(--j);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(--i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Light</span><span class="hljs-params">(uchar location, num)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(location)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span> :P2_4 = <span class="hljs-number">1</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">1</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :P2_4 = <span class="hljs-number">0</span>;P2_3 = <span class="hljs-number">0</span>;P2_2 = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;<br>    &#125;<br>    P0 = lightNum[num];<br>    <span class="hljs-comment">//为了消除消影现象</span><br>    Delay(<span class="hljs-number">1</span>);<br>    P0 = <span class="hljs-number">0x00</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>Light(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//Delay(1);</span><br>        Light(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//Delay(1);</span><br>        Light(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//Delay(1);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LCD1602调试工具"><a href="#LCD1602调试工具" class="headerlink" title="LCD1602调试工具"></a>LCD1602调试工具</h3></li></ul><h3 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h3><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><ul><li>电平标准不一致的时候，需要加电平转换芯片</li><li>电平标准：TTL、RS232、RS485<br>异步：通信双方按照约定通信速率<br>同步：通信双</li></ul>]]></content>
    
    
    <categories>
      
      <category>MCU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5和CSS(别看，写的很乱！)</title>
    <link href="/2023/03/13/%E5%89%8D%E7%AB%AF/"/>
    <url>/2023/03/13/%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Web前端（html5、css3-没学完）"><a href="#Web前端（html5、css3-没学完）" class="headerlink" title="Web前端（html5、css3/没学完）"></a>Web前端（html5、css3/没学完）</h1><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><ul><li>table，表格；tr，表示表格的一行；td，表示一个单元格；colspan，横向合并单元格；rowspan，纵向合并单元格</li><li>可以将一个表格分+成三部分：头部thead（td可以写成th）   主题tbody   底部tfoot</li></ul><h2 id="表格的样式"><a href="#表格的样式" class="headerlink" title="表格的样式"></a>表格的样式</h2><ul><li><p>border-spacing属性（在table中设置）：指定边框之间的距离</p></li><li><p>border-collapse属性（在table中设置）：设置边框的合并</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-collapse</span>：collapse；//合并边框<br></code></pre></td></tr></table></figure></li><li><p>如果表格中没有使用tbody而直接使用tr，则浏览器会自动创建一个tbody并将tr全部放进tbody中</p></li><li><p>设置奇数行/偶数行变色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">tr</span>：nth-child（<span class="hljs-number">2</span>n+<span class="hljs-number">1</span>）&#123;<br>    <span class="hljs-attribute">background-color</span>：red；<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>默认情况下，元素在td中是垂直居中的</p></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li><p>form，action属性：表单提交的服务器的地址</p></li><li><p>input（文本框），type属性（指定类型）：text，文本框；submit，提交按钮；password，密码框。value属性（提交按钮的文字）</p></li><li><p><strong>注意：数据提交到服务器，必须要为元素指定一个name属性值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;地址&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">readonly</span> <span class="hljs-attr">disabled</span>&gt;</span>//文本框,autocomplete=&quot;off&quot;可以关闭自动补全，readonly将表单设置为只读且数据会提交，disabled将表单设置为禁用且数据不会提交，autofocus设置表单项自动获取焦点<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span>//登录按钮<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>//密码框<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>//单选按钮1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>//单选按钮2，两个单选框的name属性值必须相同,checked可以将按钮默认选中<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>//多选框1<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>//多选框2<br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>//多选框3,也可以加checked<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>//下拉菜单，selected可以将按钮默认选中<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span>//普通的按钮<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置按钮&quot;</span>&gt;</span>//重置按钮<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> &gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>//避免使用<br>     <br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li></li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><hr><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><strong>元素选择器</strong></li><li><strong>id选择器</strong></li><li><strong>类选择器（class选择器）</strong></li><li><strong>通配选择器</strong></li><li><strong>交集选择器</strong></li><li><strong>并集选择器</strong></li><li><strong>子元素选择器</strong> </li><li><strong>后代元素选择器</strong></li><li><strong>兄弟元素选择器</strong></li><li><strong>属性选择器</strong></li><li><strong>伪类选择器</strong></li><li><strong>伪元素选择器</strong></li></ul><h2 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h2><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul><li><strong>文档流（normal flow）</strong><ol><li> 文档流位于网页的最底层，是网页的基础，我们创建的元素默认都是在文档流中进行排列</li><li>元素有两个状态：<strong>在文档流中</strong>和<strong>脱离文档流</strong></li><li>元素在<strong>文档流</strong>中有什么特点<ul><li>块元素：会独占一行自上而下排列，默认宽度是父元素的全部，默认高度会被子元素撑开</li><li>行内元素：不会独占一行自左向右排列，默认宽度高度会被子元素撑开</li></ul></li></ol></li></ul><ul><li><p><strong>盒子模型（box model）</strong></p><ol><li><p>css将页面所有元素都设置成为了一个矩形盒子</p></li><li><p>每一个盒子的组成部分：内容区（content,若不写字体大小则会表现为3px）内边距（padding，若不写则会表现为黑色）边框（border）外边距（margin）</p><ul><li><p>内容区大小由width和height来设置，所有文本内容都会在内容区排列</p></li><li><p> 边框宽度border-width，边框颜色border-color，边框样式border-style（solid实线、dotted点状虚线、dashed虚线、double双线，transparent边框透明）</p></li><li><p>border可以用来指定四个方向边框的宽度、颜色、样式，</p><p>值的情况是：四个值     上、右、下、左，三个值     上、左右、下，</p><p>​                      两个值      上下、左右，      一个值     上下左右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-width</span>：<span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>；<br><span class="hljs-attribute">border-color</span>：red blue green purple；<br><span class="hljs-attribute">border-color</span>：double dashed solid dotted；<br></code></pre></td></tr></table></figure></li><li><p>border-×××-width/color/style，×××可以是top、right、left、down，用来指定特定边框</p></li><li><p>border简写属性，顺序随便，border-×××可以指定特定边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>：<span class="hljs-number">30px</span> red solid；<br><span class="hljs-attribute">border</span>-×××：<span class="hljs-number">30px</span> red solid<br></code></pre></td></tr></table></figure></li><li><p>一共有四个方向的内边距，padding-top/bottom/right/left，内容区的背景颜色会延伸到内边距上 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding-top</span>:<span class="hljs-number">30px</span>;<br></code></pre></td></tr></table></figure></li><li><p>内边距简写属性：语法和border相同</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding</span>:<span class="hljs-number">30px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">80px</span>;<br></code></pre></td></tr></table></figure></li><li><p>外边距不会影响盒子大小，但会影盒子的位置，一共有四个方向的外边距，margin-top/bottom/left/right，外边距会影响盒子的实际大小  </p></li><li><p>margin简写属性和padding一样</p></li></ul></li><li><p>盒子的水平布局</p><ul><li><p>一个元素在其父元素中，必须满足以下等式：margin-left+border-left+padding-left+width+padding-right+border-right+margin-left=其父元素内容区的宽度 <strong>（必须满足）</strong></p></li><li><p>若相加使等式不成立，则称为过度约束，等式会自动调整，若这七个值没有auto（只有width、margin-left/right这三个可设为auto，并且width的默认值是auto）情况则会调整margin-right， 若有auto，则会优先调整auto</p></li><li><p>一个宽和一个外边距设置为auto，则会调整宽度，外边距为0；三个都是auto，则会调整宽度，外边距都为0；两个外边距是auto，则外边距会调整成相同的值，常用这个特点使一个元素在父元素中居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>：<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>盒子的垂直布局</p><ul><li>默认情况下，父元素高度被子元素撑开</li><li>若子元素超过了父元素的大小，则子元素会溢出</li><li>使用overflow属性来设置溢出的子元素，可选值：visible(默认值，子元素会在父元素外部显示)，hidden（子元素溢出部分被裁减），scroll（生成滚动条），auto（根据需要生成滚动条）</li><li>overflow-x：单独处理水平方向，overflow-y：单独处理垂直方向</li></ul></li><li><p>外边距的折叠</p><ul><li><strong>相邻</strong>的<strong>垂直方向</strong>外边距会发生重叠现象</li><li>兄弟元素间的相邻外边距（两者都是正值）取两者间较大值，相邻外边距（一正一负）取两者之和，相邻外边距（两负）取绝对值最大值，兄弟元素之间的重叠对开发来 说是有益的</li><li>父子元素间的相邻外边距，子元素的会传递给父元素，父子元素外边距的折叠会影响到页面的布局（可以通过改变内边距、边框来消除）</li></ul></li><li><p>行内元素的盒子模型</p><ul><li>不支持设置宽度和高度</li><li>可以设置margin、border、padding（只能设置right、left），垂直方向的并且不会影响（排挤）网页布局 </li><li>display属性：用来设置元素显示的类型，可选值：inline、block、inline-block（既可以设置高度宽度，又不会独占一行，兼具块元素和行内元素的特点）、table（表格）、none（元素不在网页中显示，隐藏）</li><li>visibility属性：用来设置元素的显示状态，可选值：visible（正常显示）、hidden（隐藏，但依然占据页面位置）</li></ul></li><li><p>盒子的大小，box-sizing属性，默认值是content-box，高度和宽度用来设置内容区的大小，border-box，高度和宽度用来设置整个盒子的大小（不包括margin）</p></li></ol></li><li><p><strong>网页的默认样式</strong></p><ol><li>通常我们必须要去除浏览器的默认样式 ，用通配  选择器进行删除，列表可用list-style：none；来进行去除，进行复杂网页要一个一个去除</li><li>reset.css直接去除浏览器所有默认样式，normalize.css对默认样式进行的统一</li></ol></li><li><p><strong>轮廓、阴影、圆角</strong></p><ol><li><p>outline属性，用来设置元素的轮廓线，<strong>用法和border一样</strong>，但不会影响到可见框的大小（不会排挤其他元素）</p></li><li><p>box-shadow属性，用来设置元素的阴影效果，也不会排挤其他元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>：<span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> red；<br>&lt;!--第一个值是水平偏移量，正值向右移动，第二个值是垂直偏移量，正值向下移动，第三个值是阴影的模糊半径，数值越大越模糊，第四个值是阴影的颜色--&gt;<br></code></pre></td></tr></table></figure></li><li><p>border-radius属性，可以单独指定，又可以四个全部指定,四个值：从左上开始顺时针，三个值、两个值、一个值 参考padding和margin。border-radius：50%；是圆形</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-top-right-radius</span>：<span class="hljs-number">10px</span> <span class="hljs-number">50px</span>;&lt;!--第一个值是x轴，第二个值是y轴--&gt;<br><span class="hljs-attribute">border-radius</span>： <span class="hljs-number">10px</span>/<span class="hljs-number">30px</span>;<br>&lt;!--第一个值是x轴，第二个值是y轴--&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="浮动（横向布局）"><a href="#浮动（横向布局）" class="headerlink" title="浮动（横向布局）"></a>浮动（横向布局）</h2><ul><li><p>float属性，none默认值元素不浮动，left元素向左浮动，right元素向右浮动。</p></li><li><p><strong>若设置浮动，水平布局等式便不需要强制成立，会完全从文档流中脱离，不在占用文档流的位置</strong></p></li><li><p>元素浮动后会向父元素的左侧或右侧移动，默认不会从父元素中移出</p></li><li><p>浮动元素不会覆盖 前面其他的浮动元素</p></li><li><p>浮动元素上面是没有浮动的块元素，则浮动元素无法上移</p></li><li><p>浮动元素不会超过它上面的浮动的兄弟元素，最多和它一样高</p></li><li><p>浮动元素不会盖住文字（文字环绕图片）</p></li><li><p><strong>脱离文档流特点（不是浮动所特有的）</strong>，块元素不再独占一行，块元素宽度和高度默认都被内容撑开；行内元素具有块元素的特性，但不占一行</p></li><li><p>高度塌陷问题：当子元素浮动以后，子元素从文档流中脱离，导致父元素高度丢失，其下元素会自动上移</p></li><li><p>BFC，块级格式化环境，BFC是css中的一个隐含的属性，开启BFC该元素会变成一个独立的布局区域，开启BFC后的特点：</p><ol><li>开启BFC的元素<strong>不会被浮动元素所覆盖</strong></li><li><strong>开启BFC的父元素和子元素的外边距不会重叠</strong></li><li>开启BFC的元素<strong>可以包含浮动的子元素</strong></li></ol></li><li><p>开启BFC的方法：</p><ol><li>浮动</li><li>行内块</li><li>将元素的overflow设置为一个非visible的值（常用方法），以使其可以包含浮动元素</li></ol></li><li><p>clear属性（原理：通过设置外边距），清除浮动元素对当前元素所产生的影响，可选值：left，清除左侧浮动元素对当前元素的影响；right，清除右侧浮动元素对当前元素的影响；both，清除两侧中影响最大的那侧</p></li><li><img src="C:\Users\86151\AppData\Roaming\Typora\typora-user-images\image-20220209183538905.png" alt="image-20220209183538905" style="zoom:90%;" /><p>这行代码可以解决<strong>父子元素外边距重叠</strong>和<strong>内容塌陷</strong>的问题</p></li></ul><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li>通过定位可以将元素摆放到页面的任意位置</li><li>position属性，可选值：static（默认值），元素是静止的没有开启定位；relative，相对定位；absolute，绝对定位；fixed，固定定位；sticky，粘滞定位。</li><li>相对定位特点：如果不设置偏移量则元素不会发生变化；参照于<strong>原来的位置</strong>进行计算；相对定位会提升元素的层级，但不会脱离文档流，性质不会改变</li><li>偏移量（offset），元素开启定位后，可通过偏移量来设置元素的位置，top、right、left、bottom。top和bottom通常只会使用其一，left和right只会使用其一。</li><li>绝对定位的特点：如果不设置偏移量则元素的位置不会发生变化；脱离文档流，改变元素的性质，行内变成块，块的高度宽度被内容撑开，会提升元素的层级；参照于其<strong>包含块</strong>进行定位（包含块就是离当前元素最近的祖先块元素，这里指最近开启定位的块元素）</li><li>固定定位（特殊的绝对定位）的特点：和绝对定位相同 ，但参照于<strong>视口</strong>进行定位 </li><li>粘滞定位（了解）</li><li>定位的水平布局：left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right = <strong>其包含块的宽度</strong></li><li>可设置auto的值：left、right、width、margin-left、margin-right。left和right默认值都是auto。当出现过度约束时且没有auto，则会自动调整right；当出现过度约束时且有auto，则会自动调整auto</li><li>定位的垂直布局：top + margin-top + border-top + padding-top + height + padding-bottom + border-bottom + margin-bottom + top = <strong>其包含块的高度</strong></li><li>原理和水平布局类似</li><li>对于开启了定位元素，可以通过z-index属性来指定元素的层级，需要一个整数作为参数，若层级一样，则优先显示下面的元素。但祖先元素层级更高也不会盖住后代元素 </li></ul><h2 id="字体族"><a href="#字体族" class="headerlink" title="字体族"></a>字体族</h2><ul><li><p> font-family属性，用于选择字体，可以同时使用多种字体，用逗号隔开 </p></li><li><p>@font-face属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span>&#123;<br> <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&#x27;名字&#x27;</span>;<br> <span class="hljs-attribute">src</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">路径</span>)<span class="hljs-built_in">format</span>(字体的格式);<br>    &lt;!<span class="hljs-attr">--url</span>可以写多个，format写不写都行--&gt;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>图标字体（iconfont）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas或fab    描述      &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>//实体<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;\编码&#x27;</span>；font-family: <span class="hljs-string">&#x27;Font Awesome 6 Brands&#x27;</span>;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;或者<span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Font Awesome 6 Free&#x27;</span>;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">900</span>; &#125;//伪元素<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas或fab&quot;</span>&gt;</span>&amp;#x编码;<span class="hljs-tag">&lt;/<span class="hljs-name">sapn</span>&gt;</span>//实体<br></code></pre></td></tr></table></figure></li><li><p>行高line-height，如果是一个整数的话，行高将会是字体指定的倍数，字体框font-size，<strong>行高会在字体框的上下平均分配</strong></p></li><li><p>字体的简写属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font</span>：字体大小/行高 字体族;<br></code></pre></td></tr></table></figure></li><li><p>font-weight属性，字体的加粗，可选值normal默认值；bold加粗</p></li><li><p>font-style属性，字体的风格，可选值italic斜体</p></li><li><p>text-align属性，文本的水平对齐，可选值left左对齐；right右对齐；center居中对齐；justify两端对齐</p></li><li><p>vertical-align属性，垂直对齐，可选值 baseline基线对齐；topd顶部对齐；bottom底部对齐；middle居中对齐;可以赋值。（图片可以通过这种方法对齐）</p></li><li><p>text-decoration属性，文本修饰，可选值：none；underline下划线；line-through删除线；overline上划线</p></li><li><p>white-space属性，设置网页如何处理空白，可选值：normal；nowrap不换行；pre保留空白</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>：<span class="hljs-number">200px</span>；<br><span class="hljs-attribute">white-space</span>：nowrap；<br><span class="hljs-attribute">overflow</span>：hidden；<br><span class="hljs-attribute">text-overflow</span>：ellipsis；//省略号的代码<br></code></pre></td></tr></table></figure></li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li><p>background-image属性，背景 图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>：url（路径）；<br></code></pre></td></tr></table></figure></li><li><p>background-repeat属性，设置背景的重复方式，可选值：repeat默认值；repeat-x沿着x轴方向重复；repeat-y沿着y轴方向重复；no-repeat不重复</p></li><li><p>background-position属性，设置图片的位置，设置方式：通过设置top<code> </code>left<code> </code>right<code> </code>bottom<code> </code>center表达方位的5个值；通过设置偏移量，和box-shadow用法一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-position</span>：center center；//<span class="hljs-attribute">position</span>第一种表达形式<br></code></pre></td></tr></table></figure></li><li><p>background-clip属性，设置背景的范围，可选值：<strong>border-box默认值</strong>，背景会出现在边框；padding-box，背景只会出现在内容区和内边距；content-box，背景只会出现在内容区</p></li><li><p>background-origin属性，<strong>padding-box默认值</strong>，背景图片原点在内边距；border-box；content-box</p></li><li><p>background-size属性， 背景图片大小，第一个值宽度，第二个值是高度,如果只写一个，则第二个默认是auto；cover，图片比例不变，高将元素撑满；contain，图片比例不变，宽撑满，将图片在元素中完整显示</p></li><li><p>background-attachment属性，可选值：scroll，背景图片随元素移动；fixed，背景图片固定在页面中，不会随元素移动</p></li><li><p>background属性，上述元素的都可以写进background 。书写顺序注意点：position/size和origin clip这两个顺序不能错</p></li><li><p>图片是按需加载的，用则加载，不用则不加载    </p></li><li><p>解决图片闪烁的问题：通过雪碧图解决,将多个小图片放在一张大图片上</p></li><li><p>background-image属性，线性渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>：linear-gradient （颜色<span class="hljs-number">1</span> ××px，颜色<span class="hljs-number">2</span>，......）；<br></code></pre></td></tr></table></figure><p>颜色1在上面，颜色2在下面；to 方向；×××deg表示度数；×××turn表示转几圈；颜色1从××px处开始渐变。多种颜色之间会平均分配</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>：repeating-linear-gradient（颜色<span class="hljs-number">1</span> ××px，颜色<span class="hljs-number">2</span>，......）；<br></code></pre></td></tr></table></figure><p>重复的图片渐变</p></li><li><p>background-image属性，径向渐变（放射性的效果）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>：radial-gradient （××px ××px at ××px ××px，颜色<span class="hljs-number">1</span>，颜色<span class="hljs-number">2</span>，......）； <br></code></pre></td></tr></table></figure><p>颜色1在里面，颜色2在外面；宽高为xxpx的径向渐变；××px ××px可以改为circle（圆形）或者ellipse（椭圆）；at可以调位置</p></li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><em>注意点</em></h2><ul><li><strong>选择器的权重（优先级）</strong></li></ul><ol><li><p>当用不同选择器选择相同元素且设置不同格式，就会发生冲突。优先级：内联样式&gt;id选择器&gt;类和伪类选择器&gt;元素选择器 &gt;通配选择器&gt;继承的样式。</p></li><li><p>比较优先级时，需要将所有选择器的优先级相加计算，最后优先级性越高越优先显示（分组选择器单独计算，交集选择器相加计算），选择器的累加不会超过其最大的数量级。</p></li><li><p>若优先级相同，则优先使用下面的。</p></li><li><p> 在样式后加！important   ，则会获得最高的优先级</p></li></ol>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-size</span>：<span class="hljs-number">30px</span> ！important；<br></code></pre></td></tr></table></figure><ul><li><strong>单位</strong></li></ul><ol><li><p>像素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-size</span>：<span class="hljs-number">30px</span>；<br></code></pre></td></tr></table></figure></li><li><p>百分比%，可以根据<strong>父元素</strong>的改变而改变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-size</span>：<span class="hljs-number">50%</span>；<br></code></pre></td></tr></table></figure></li><li><p>em，1 em=1 font-size，em会跟自身字体大小改变而改变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">10em</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">10em</span>;<br>&lt;!<span class="hljs-attr">--width</span>=<span class="hljs-attribute">height</span>=<span class="hljs-number">300px</span>--&gt;<br></code></pre></td></tr></table></figure></li><li><p>rem，rem会根据html字体大小改变而改变</p></li><li><p>RGB值，通过三种颜色的不同浓度来调配出不同的颜色，每一种颜色的范围在0~255之间，红绿蓝是光的三原色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>：rgb（<span class="hljs-number">0</span>，<span class="hljs-number">0</span>，<span class="hljs-number">0</span>）；<br></code></pre></td></tr></table></figure></li><li><p>RGBA值，A表示不透明度，语法需要加四个值 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>：rgba（<span class="hljs-number">0</span>，<span class="hljs-number">0</span>，<span class="hljs-number">0</span>，<span class="hljs-number">0.0</span>）；<br></code></pre></td></tr></table></figure></li><li><p>十六进制的RGB值，三种颜色范围在00~ff，语法：background-color：#000000；（如果每个颜色的两位都重复则可进行简写）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>：<span class="hljs-selector-id">#000000</span>；<br></code></pre></td></tr></table></figure></li><li><p>HSL值， H是色相（0<del>360），S是饱和度（颜色的浓度，0%</del>100%），L是亮度（颜色的亮度，0%~100%），代码和rgb同理</p></li><li><p>HSLA值，和上面rgba值同理</p></li><li><p>text-decoration：none：去除超链接下划线</p></li><li><p>若想要一个元素在父元素中垂直居中，就得让父元素的height=line-height</p></li><li><p>html是根元素和初始包含块</p></li><li><p><code>background-clip:content-box</code>将背景颜色设置到内容区，边框和内边距不再有背景颜色</p></li><li><p>border-color也可以设置成transparent的样式，border也可以设置为none的样式</p></li><li><p>transition为样式设置过度效果</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lua</title>
    <link href="/2023/03/13/lua/"/>
    <url>/2023/03/13/lua/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="lua语法"><a href="#lua语法" class="headerlink" title="lua语法"></a>lua语法</h1><p>1.变量</p><ul><li>默认的变量都是全局变量，可以加关键词local进行修饰<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-number">10</span>//全局变量<br><span class="hljs-keyword">local</span> b = <span class="hljs-number">100</span>//局部变量<br></code></pre></td></tr></table></figure></li><li>任何一个没有被声明过的变量都是nil，相当于c中的NULL</li><li>可以同时赋值<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">a,b = <span class="hljs-number">10</span>,<span class="hljs-number">20</span><br>a,b,c = <span class="hljs-number">10</span>,<span class="hljs-number">20</span>//c为<span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure></li><li>lua只有一种数值型number，支持16进制计数法、科学计数法等等<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-number">2e6</span><br>b = <span class="hljs-number">0x11</span><br></code></pre></td></tr></table></figure></li></ul><p>2.字符串</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = <span class="hljs-string">&#x27;字符串&#x27;</span><br>b = <span class="hljs-string">&quot;字符串&quot;</span><br>c = <span class="hljs-string">[[字符串]]</span>//三者效果一样<br>d = a..b//连接a和b<br>e = toString(<span class="hljs-number">10</span>)//转换成为字符串<br>f = toNumber(<span class="hljs-string">&quot;10&quot;</span>)//转换成为数字，若转化失败返回值就是<span class="hljs-literal">nil</span><br><span class="hljs-built_in">print</span>(#a)//可以查到字符串的长度<br>s = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">char</span>(<span class="hljs-number">0x11</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x14</span>)<br>r = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">byte</span>(s,<span class="hljs-number">2</span>)//获取s的第二个字符<br></code></pre></td></tr></table></figure><p>3.函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名<span class="hljs-params">()</span></span><br>函数体<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>4.数组</p><ul><li>数字作为数组下标<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = &#123;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">200</span>&#125;<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>])//获取数组中第一个元素<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(a,<span class="hljs-number">123</span>)//在尾部插入元素<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(a,<span class="hljs-number">2</span>，<span class="hljs-number">123</span>)//在数组第二个位置插入元素<br><span class="hljs-built_in">table</span>.<span class="hljs-built_in">remove</span>(a,<span class="hljs-number">2</span>)//移除数组第二个元素<br><span class="hljs-built_in">print</span>(#a)//获取数组中元素个数<br></code></pre></td></tr></table></figure></li><li>字符串作为数组下标<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">a = &#123;<br>a = <span class="hljs-number">123</span>,<br>b = <span class="hljs-string">&quot;你好&quot;</span>,<br>c = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">end</span><br>&#125;<br><span class="hljs-built_in">print</span>(a[<span class="hljs-string">&quot;a&quot;</span>])<br><span class="hljs-built_in">print</span>(a.a)//这两种方法都能打印数组的第一个元素<br></code></pre></td></tr></table></figure></li><li>lua中所有的全局变量都在_G这个table中</li></ul><p>5.布尔类型</p><ul><li>lua中只有nil和false代表假，0代表真</li></ul><p>6.if语句</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;yes&quot;</span>)<br><span class="hljs-keyword">elseif</span> <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span> <span class="hljs-keyword">then</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;equal&quot;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>7.循环</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">end</span>//相当于<span class="hljs-keyword">for</span>(int i = <span class="hljs-number">1</span>;i &lt;=<span class="hljs-number">10</span> ; i += <span class="hljs-number">2</span>)<br><br>n = <span class="hljs-number">10</span><br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br><span class="hljs-built_in">print</span>(n)<br>n = n - <span class="hljs-number">1</span>//lua中没有自减和自增运算符<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Lua</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
